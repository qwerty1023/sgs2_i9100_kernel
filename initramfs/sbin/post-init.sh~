#!/sbin/busybox sh

# Logging

/sbin/busybox cp /data/user.log /data/user.log.bak
/sbin/busybox rm /data/user.log
exec >>/data/user.log
exec 2>&1

echo $(date) START of post-init.sh



# Remount rootfs rw
  /sbin/busybox mount rootfs -o remount,rw

##### Early-init phase #####

# Android Logger enable tweak (lo dejo por compatibilidad con Hardcore)
if /sbin/busybox [ "`/sbin/busybox grep ANDROIDLOGGER /system/etc/tweaks.conf`" ]; then
  insmod /lib/modules/logger.ko
fi

#Desde el recovery
if /sbin/busybox [ -f /data/.enable_logs ]; then
   insmod /lib/modules/logger.ko
fi



# IPv6 privacy tweak
#if /sbin/busybox [ "`/sbin/busybox grep IPV6PRIVACY /system/etc/tweaks.conf`" ]; then
  echo "2" > /proc/sys/net/ipv6/conf/all/use_tempaddr
#fi


# Tweak cfq io scheduler
#  for i in $(/sbin/busybox find /sys/block/mmc*)
#  do echo "0" > $i/queue/rotational
#    echo "0" > $i/queue/iostats
#    echo "8" > $i/queue/iosched/quantum
#    echo "4" > $i/queue/iosched/slice_async_rq
#    echo "1" > $i/queue/iosched/low_latency
#    echo "0" > $i/queue/iosched/slice_idle
#    echo "1" > $i/queue/iosched/back_seek_penalty
#    echo "1000000000" > $i/queue/iosched/back_seek_max
#  done

# Remount all partitions with noatime
  for k in $(/sbin/busybox mount | /sbin/busybox grep relatime | /sbin/busybox cut -d " " -f3)
  do
        sync
        /sbin/busybox mount -o remount,noatime $k
  done

# Remount ext4 partitions with optimizations
  for k in $(/sbin/busybox mount | /sbin/busybox grep ext4 | /sbin/busybox cut -d " " -f3)
  do
        sync
        /sbin/busybox mount -o remount,commit=15 $k
  done
  

# Miscellaneous tweaks
  echo "1500" > /proc/sys/vm/dirty_writeback_centisecs
  echo "200" > /proc/sys/vm/dirty_expire_centisecs
  echo "0" > /proc/sys/vm/swappiness
  echo "8192" > /proc/sys/vm/min_free_kbytes

# CFS scheduler tweaks
  echo HRTICK > /sys/kernel/debug/sched_features

# SD cards (mmcblk) read ahead tweaks
  echo "256" > /sys/block/mmcblk0/bdi/read_ahead_kb
  echo "256" > /sys/block/mmcblk1/bdi/read_ahead_kb

# TCP tweaks
  echo "2" > /proc/sys/net/ipv4/tcp_syn_retries
  echo "2" > /proc/sys/net/ipv4/tcp_synack_retries
  echo "10" > /proc/sys/net/ipv4/tcp_fin_timeout

# SCHED_MC power savings level
  #echo "1" > /sys/devices/system/cpu/sched_mc_power_savings

# Turn off debugging for certain modules
  echo "0" > /sys/module/wakelock/parameters/debug_mask
  echo "0" > /sys/module/userwakelock/parameters/debug_mask
  echo "0" > /sys/module/earlysuspend/parameters/debug_mask
  echo "0" > /sys/module/alarm/parameters/debug_mask
  echo "0" > /sys/module/alarm_dev/parameters/debug_mask
  echo "0" > /sys/module/binder/parameters/debug_mask


###### Compatibilidad con CWMManager ##########


# Remount system RW
/sbin/busybox mount -t rootfs -o remount,rw rootfs 
    

mkdir -p /customkernel/property
	echo true >> /customkernel/property/customkernel.cf-root 
	echo true >> /customkernel/property/customkernel.base.cf-root 
	echo Apolo >> /customkernel/property/customkernel.name 
	echo "Kernel Apolo JB" >> /customkernel/property/customkernel.namedisplay 
	echo 136 >> /customkernel/property/customkernel.version.number 
	echo 5.6 >> /customkernel/property/customkernel.version.name 
	echo true >> /customkernel/property/customkernel.bootani.zip 
	echo true >> /customkernel/property/customkernel.bootani.bin 
	echo true >> /customkernel/property/customkernel.cwm 
	echo 5.0.2.7 >> /customkernel/property/customkernel.cwm.version
#/sbin/busybox mount -t rootfs -o remount,ro rootfs 


##### Install SU ######################################################################################
Extracted_payload=0
# Check for auto-root bypass config file
if [ -f /system/.noautoroot ] || [ -f /data/.noautoroot ];
then
	echo "File .noautoroot found. Auto-root will be bypassed."
else
	# Seccion para rootear, instalar CWMManager y libreria del BLN
	#if  [ -e /system/xbin/su ] &&  [ -e /system/app/Superuser.apk ]  && [ -e /system/app/CWMManager.apk ] && [ -e /system/lib/hw/lights.exynos4.so.ApoloBAK2 ];
	if [ -f /system/Apolo/Desde_4- ];
	then
		echo "Nada que hacer, tenemos todo listo" 
	else

		echo "Extraer payload"	
			Extracted_payload=1				
			/sbin/chmod 755 /sbin/read_boot_headers
			eval $(/sbin/read_boot_headers /dev/block/mmcblk0p5)
			load_offset=$boot_offset
			load_len=$boot_len
			cd / 
			/sbin/dd bs=512 if=/dev/block/mmcblk0p5 skip=$load_offset count=$load_len | tar x
		 	
		#Hacemos  root
			/sbin/busybox mount /system -o remount,rw
			/sbin/busybox rm /system/bin/su
			/sbin/busybox rm /system/xbin/su
			#/sbin/busybox cp /res/misc/su /system/xbin/su
			/sbin/xzcat /res/misc/su.xz > /system/xbin/su
			/sbin/busybox chown 0.0 /system/xbin/su
			/sbin/busybox chmod 6755 /system/xbin/su
			/sbin/busybox mount /system -o remount,ro
		#Supersu
			/sbin/busybox mount /system -o remount,rw
			/sbin/busybox rm /system/app/Superuser.apk
			/sbin/busybox rm /data/app/Superuser.apk
			/sbin/busybox rm /system/app/Supersu.apk
			/sbin/busybox rm /data/app/Supersu.apk
			#/sbin/busybox cp /res/misc/Superuser.apk /system/app/Superuser.apk
			/sbin/xzcat /res/misc/Superuser.apk.xz > /system/app/Superuser.apk
			/sbin/busybox chown 0.0 /system/app/Superuser.apk
			/sbin/busybox chmod 644 /system/app/Superuser.apk
			/sbin/busybox mount /system -o remount,ro 
		#AÃ±adiendo CWMManager
		
			#/sbin/busybox rm /system/app/CWMManager.apk
			#/sbin/busybox rm /data/dalvik-cache/*CWMManager.apk*
			#/sbin/busybox rm /data/app/eu.chainfire.cfroot.cwmmanager*.apk
			#/sbin/xzcat /res/misc/CWMManager.apk.xz > /system/app/CWMManager.apk
			#/sbin/busybox chown 0.0 /system/app/CWMManager.apk
			#/sbin/busybox chmod 644 /system/app/CWMManager.apk
		
		#Librerias para el BLN

			sbin/busybox mount /system -o remount,rw
			/sbin/xzcat /res/misc/lights.exynos4.so.xz > /res/misc/lights.exynos4.so
			echo "Copiando las  liblights"
			/sbin/busybox cp -f /system/lib/hw/lights.exynos4.so /system/lib/hw/lights.exynos4.so.ApoloBAK2
			/sbin/busybox cp -f /res/misc/lights.exynos4.so /system/lib/hw/lights.exynos4.so
			/sbin/busybox chown 0.0 /system/lib/hw/lights.exynos4.so
			/sbin/busybox chmod 644 /system/lib/hw/lights.exynos4.so

		#Lo hacemos solo la primera vez
			/sbin/busybox mkdir /system/Apolo
    			/sbin/busybox chmod 755 /system/Apolo
			echo 1 > /system/Apolo/Desde_4- 
			/sbin/busybox mount /system -o remount,ro 
	fi
	#Borramos payload
	rm -rf /res/misc/*
fi

/sbin/busybox mount -t rootfs -o remount,ro rootfs

# Fin de la seccion su y ficheros auxiliares ############################################################################################################################

echo $(date) PRE-INIT DONE of post-init.sh
##### Post-init phase #####
sleep 12

# Cleanup busybox
  #/sbin/busybox rm /sbin/busybox
  #/sbin/busybox mount rootfs -o remount,ro

# init.d support
echo $(date) USER EARLY INIT START from /system/etc/init.d
if cd /system/etc/init.d >/dev/null 2>&1 ; then
    for file in E* ; do
        if ! cat "$file" >/dev/null 2>&1 ; then continue ; fi
        echo "START '$file'"
        /system/bin/sh "$file"
        echo "EXIT '$file' ($?)"
    done
fi
echo $(date) USER EARLY INIT DONE from /system/etc/init.d

echo $(date) USER EARLY INIT START from /data/init.d
if cd /data/init.d >/dev/null 2>&1 ; then
    for file in E* ; do
        if ! cat "$file" >/dev/null 2>&1 ; then continue ; fi
        echo "START '$file'"
        /system/bin/sh "$file"
        echo "EXIT '$file' ($?)"
    done
fi
echo $(date) USER EARLY INIT DONE from /data/init.d

echo $(date) USER INIT START from /system/etc/init.d
if cd /system/etc/init.d >/dev/null 2>&1 ; then
    for file in S* ; do
        if ! ls "$file" >/dev/null 2>&1 ; then continue ; fi
        echo "START '$file'"
        /system/bin/sh "$file"
        echo "EXIT '$file' ($?)"
    done
fi
echo $(date) USER INIT DONE from /system/etc/init.d

echo $(date) USER INIT START from /data/init.d
if cd /data/init.d >/dev/null 2>&1 ; then
    for file in S* ; do
        if ! ls "$file" >/dev/null 2>&1 ; then continue ; fi
        echo "START '$file'"
        /system/bin/sh "$file"
        echo "EXIT '$file' ($?)"
    done
fi
echo $(date) USER INIT DONE from /data/init.d

#Colocando tweaks de configuracion

if /sbin/busybox [ -f /data/.disable_mdnie ]; then
   echo 0 > /sys/class/misc/mdnie_preset/mdnie_preset
   echo $(date) Disable mdnie sharpness
else
   echo 1 > /sys/class/misc/mdnie_preset/mdnie_preset
   echo $(date) Enable mdnie sharpness
fi

if /sbin/busybox [ -f /data/.enable_crt ]; then
   echo $(cat /data/.enable_crt) > /sys/power/fb_pause
   echo $(date) Value inside the .enable_crt
else
   echo 50 > /sys/power/fb_pause
   echo $(date) Default Value 50
fi
  

echo $(date) END of post-init.sh
